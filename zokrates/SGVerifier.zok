

import "utils/pack/u32/nonStrictUnpack256.zok";
import "utils/pack/u32/pack256.zok";
import "utils/casts/u32_to_field.zok";

// number of 32 bit words in 256 bits
const u32 C32T256 = 8;

const u32 NUM_NODES = 11;
const u32 NUM_BLOCKS_PER_NODE = 10;

// this is the main ZKSnark code that checks the validity of processed nodes.
// Based on 11 total nodes, 10 micro processed blocks at a time for each node.
// The verfier node has 10 processed blocks also
// which are 1 each of the other nodes.  The Hash of the previous block xor this
struct XORWOW_STATE {
    u32[5] x;
    u32 counter;
    u32 current;
}

struct BLOCK_HEADER {
    field prevHash;
    u32 nonce;
    u32 timestamp;
    field uncleHash;
    field dataHash;
}

/* The state array must be initialized to not be all zero in the first four words */
def xorwow(XORWOW_STATE mut state) -> XORWOW_STATE {
    /* Algorithm "xorwow" from p. 5 of Marsaglia, "Xorshift RNGs" */
    u32 mut t = state.x[4];

    u32 s = state.x[0]; /* Perform a contrived 32-bit shift. */
    state.x[4] = state.x[3];
    state.x[3] = state.x[2];
    state.x[2] = state.x[1];
    state.x[1] = s;

    t = t ^ (t >> 2);
    t =  t ^ (t << 1);
    t = t ^ s ^ (s << 4);
    state.x[0] = t;
    state.counter = state.counter + 362437;
    state.current = t + state.counter;
    return state;
}

// main function to take in 11 nodes blocks headers, 1 node if verifier
// verifier node has one block from each of the other 10 nodes
// encKeySee if public key encoded seed from escrow starter (prover)
// in Solidity, to functions would call this
//      1. GenBlockSigningKey(encKeySeed, prevBH, block_headers) : u256 signingHash;
//      2. VerifyBlockSignaature(encKeySeed, prevBH, block_headers) : bool isSigned;
def main(private field encKeySeed,  public BLOCK_HEADER prevBH, public BLOCK_HEADER[NUM_NODES][NUM_BLOCKS_PER_NODE] block_headers) -> u32[8] {

    u32[C32T256] encKeySeed32 = nonStrictUnpack256(encKeySeed);
    // set up the random generator seed for xorwow function
     XORWOW_STATE mut state = XORWOW_STATE { x: [
        encKeySeed32[0] ^ encKeySeed32[1], encKeySeed32[2] ^ encKeySeed32[3], encKeySeed32[4] ^ encKeySeed32[5], encKeySeed32[6] ^ encKeySeed32[7],
        0xdeadc0de
     ], counter: 0xdeadbeef, current: 0 };

    // get randomly selected verifier block
    state = xorwow(state);
    u32 verifier_node_index = state.current % NUM_NODES;
    assert (verifier_node_index == 3);
    //debugInfo = [state.x[0], state.x[1], state.x[2], state.x[3], state.x[4], state.counter, verifier_node_index, 0]
    // get the first node index % 11, could be verifier node too
    state = xorwow(state);
    u32 mut cur_node_index = state.current % NUM_NODES;
    cur_node_index = (cur_node_index + ((cur_node_index == verifier_node_index) ? 1 : 0)) % NUM_NODES;
    assert (cur_node_index == 7);
    // get the random first block inside the nodes processed blocks
    state = xorwow(state);
    u32 mut block_index = state.current % NUM_BLOCKS_PER_NODE;
    assert (block_index == 9);
    // get a random stride to access the nodes processed blocks
    state = xorwow(state);
    u32 verifier_stride = state.current % NUM_BLOCKS_PER_NODE;
    assert (verifier_stride == 9);
    // if any matches fail return 0 has the hash
    u32 mut verified_node_count = 0;


    u32[8] mut debugInfo = [verifier_node_index, cur_node_index, block_index, verifier_stride, state.x[4], state.counter, state.current, 0];

    // starting hash
    u32[8] mut xorHash = [0, 0, 0, 0, 0, 0, 0, 0];
    // loop through all 11 nodes
    for u32 i in 0..NUM_NODES-1 {

        u32[8] verifierHash = nonStrictUnpack256(block_headers[verifier_node_index][verified_node_count].dataHash);
        u32[8] nodeHash = nonStrictUnpack256(block_headers[cur_node_index][block_index].dataHash);

        log("verifierHash is {}", verifierHash);
        log("iTH nodeindex/blockindex is {} - {},{} with nodeHash {}", i, cur_node_index, block_index, nodeHash);
        u32 mut dataHashMatches = 0;
        // xor 256 bit hashes from field parameters
        for u32 j in 0..C32T256 {
            xorHash[j] = xorHash[j] ^ nodeHash[j];
            dataHashMatches = dataHashMatches + ((nodeHash[j] == verifierHash[j]) ? 1 : 0);
        }

        //log("dataHashMatches is {} for nth iteration {}", dataHashMatches, i);
        assert (dataHashMatches == C32T256);

        // add +1 if this is not the verifier node and the node hash matched with verifier node hash
        verified_node_count = verified_node_count + 1;

        // check next node skipping verifier node, wrap (modulo) NUM_NODES
        cur_node_index = (cur_node_index + ((cur_node_index == verifier_node_index-1) ? 2 : 1)) % NUM_NODES;

        block_index = (block_index + verifier_stride) % NUM_BLOCKS_PER_NODE;
    }

    assert(verified_node_count == NUM_NODES-1);
    debugInfo[7] = verified_node_count;

    // return if NUM_NODES - verfier (1 node) have been verified.
    //return encKeySeed
    //return (verified_node_count == NUM_NODES-1) ? pack256(xorHash) : pack256(debugInfo)
    //assert (verified_node_count == NUM_NODES-1)
    return (verified_node_count == NUM_NODES-1) ? xorHash : debugInfo;
}
